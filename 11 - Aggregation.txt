Aim : Implement aggregation and indexing with suitable examples using MongoDB.
Problem Statement:
1. Create Collection Product

-> db.createCollection("Product") 

2. Insert the documents by considering the keys name, company, cost

-> db.Product.insertMany([
  { name: "Laptop", company: "Dell", cost: 800 },
  { name: "Smartphone", company: "Samsung", cost: 600 },
  { name: "Tablet", company: "Apple", cost: 700 },
  { name: "Smartwatch", company: "Samsung", cost: 200 },
  { name: "Headphones", company: "Sony", cost: 150 },
  { name: "Monitor", company: "Dell", cost: 300 }
]);


3. Aggregate the documents in the collection by grouping company name and displaying minimum and
maximum price of product for the same company

-> db.Product.aggregate([
  { 
    $group: {
      _id: "$company", 
      minPrice: { $min: "$cost" }, 
      maxPrice: { $max: "$cost" }
    }
  }
]);


4. Show the sorted result on the basis of company

-> db.Product.aggregate([
  { 
    $group: {
      _id: "$company", 
      minPrice: { $min: "$cost" }, 
      maxPrice: { $max: "$cost" }
    }
  },
  { $sort: { _id: 1 } }  // Sorting by company name (ascending)
]);


5. Display number of documents in the collection

-> db.Product.countDocuments();


6. Display distinct company names in the collection

-> db.Product.distinct("company");


7. Display company name with its count for documents

-> db.Product.aggregate([
  { 
    $group: { 
      _id: "$company", 
      count: { $sum: 1 } 
    }
  }
]);


8. Limit the result for one document only

-> db.Product.find().limit(1);


9. Limit the result by skipping first two documents

-> db.Product.find().skip(2).limit(1);


10. Insert 10 documents by using for loop in the collection staff by considering keys Staff_id, staff_name,
age

->for (let i = 1; i <= 10; i++) {
  db.Staff.insertOne({
    Staff_id: i,
    staff_name: `Staff${i}`,
    age: 20 + i
  });
}


11. Find the document where Staff_id is 2 and explain different parameters for running the query. Observe
the number of scanned objects, time in milliseconds, type of cursor etc

-> db.Staff.find({ Staff_id: 2 }).explain("executionStats");


12. create index on staff_name

-> db.Staff.createIndex({ staff_name: 1 });


13. Run the query for point no 11 and observe the change in values for different parameters of the query

-> db.Staff.find({ Staff_id: 2 }).explain("executionStats");

14. Find the document of the staff where age is 40 and staff_name is „Karan‟. Observe the index name used
for running the query

-> db.Staff.find({ age: 40, staff_name: "Karan" }).explain("executionStats");


15. create the index on age and Staff_name

-> db.Staff.createIndex({ age: 1, staff_name: 1 });


16. Run the query for point no. 14 and observe the index used for running the querying

-> db.Staff.find({ Staff_id: 2 }).explain("executionStats");


17. Drop the index created on age and Staff_name and run the query for point no. 14 again and observe the
type of index

-> db.Staff.dropIndex({ age: 1, staff_name: 1 });
-> db.Staff.find({ Staff_id: 2 }).explain("executionStats");


18. Drop the index created on Staff_name and run the query for pint no. 11 and observe the type of index

-> db.Staff.dropIndex({ staff_name: 1 });
-> db.Staff.find({ Staff_id: 2 }).explain("executionStats");


19. Create a unique index on Staff_name and try inserting documents with the duplicate Staff_names.
Observe the result

-> db.Staff.createIndex({ staff_name: 1 }, { unique: true });

Now, try inserting a document with a duplicate staff_name:

-> db.Staff.insertOne({ Staff_id: 11, staff_name: "Staff1", age: 30 });

This will fail with an error because staff_name must be unique.

